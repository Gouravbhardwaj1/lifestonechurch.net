{"version":3,"sources":["webpack:///./src/templates/devotional.js","webpack:///./src/components/headers.js","webpack:///./src/components/Breadcrumbs.js","webpack:///./src/utils/formatDate.js"],"names":["MetaData","styled","target","__webpack_exports__","_ref","post","data","contentfulPost","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_4__","_components_Breadcrumbs__WEBPACK_IMPORTED_MODULE_6__","path","title","url","_components_headers__WEBPACK_IMPORTED_MODULE_5__","author","map","s","key","id","name","longFormatDate","date","fields","bodyFormatted","dangerouslySetInnerHTML","__html","query","__webpack_require__","d","H1","H2","H3","H4","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","slug","require","children","lower","_ref2","_ref3","_ref4","Container","Breadcrumbs","react__WEBPACK_IMPORTED_MODULE_1___default","item","i","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","propTypes","PropTypes","arrayOf","shape","string","isRequired","DateTime","fromISO","toLocaleString","DATE_FULL","shortFormatDate","toFormat","getDayOfWeek","getFirstStartDate","dates","reduce","firstDate","current","Date","startDate","getLastEndDate","lastDate","endDate","getFutureEvents","events","q","m","getMonth","getDate","y","getFullYear","today","filter","node","fromFormat","toJSDate","dateAndRegistration","Object","assign","sort","b","getCalendarFormat","time","formatDate","inputDate","toISO","split","replace","getCalendarURl","startTime","endTime"],"mappings":"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","file":"component---src-templates-devotional-js-962b0ec9ca2d74c84c82.js","sourcesContent":["import React from 'react';\nimport styled from 'react-emotion';\nimport { graphql } from 'gatsby';\n\nimport Layout from '../components/layout';\nimport { H1 } from '../components/headers';\nimport Breadcrumbs from '../components/Breadcrumbs';\nimport { longFormatDate } from '../utils/formatDate';\n\nconst MetaData = styled.div`\n  font-size: 14px;\n  font-style: italic;\n  color: rgba(0, 0, 0, 0.6);\n  line-height: 2em;\n  margin-bottom: 10px;\n`;\n\nexport default ({ data }) => {\n  const post = data.contentfulPost;\n\n  return (\n    <Layout>\n      <Breadcrumbs\n        path={[\n          { title: 'Home', url: '/' },\n          { title: 'Resources' },\n          { title: 'Devotionals', url: '/resources/devotionals' },\n        ]}\n        title={post.title}\n      />\n      <H1>{post.title}</H1>\n\n      <MetaData>\n        <div>{post.author.map(s => <span key={s.id}>{s.name}</span>)}</div>\n        <div>{longFormatDate(post.date)}</div>\n      </MetaData>\n      {post.fields.bodyFormatted && (\n        <div\n          dangerouslySetInnerHTML={{\n            __html: post.fields.bodyFormatted,\n          }}\n        />\n      )}\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query DevotionalTemplateQuery($id: String!) {\n    contentfulPost(id: { eq: $id }) {\n      id\n      fields {\n        bodyFormatted\n      }\n      title\n      author {\n        id\n        name\n        photo {\n          file {\n            url\n          }\n        }\n      }\n      date\n    }\n  }\n`;\n","import React from 'react';\nconst slug = require(`slug`);\n\nexport const H1 = ({ children }) => (\n  <h1 id={slug(children, { lower: true })}>{children}</h1>\n);\n\nexport const H2 = ({ children }) => (\n  <h2 id={slug(children, { lower: true })}>{children}</h2>\n);\n\nexport const H3 = ({ children }) => (\n  <h3 id={slug(children, { lower: true })}>{children}</h3>\n);\nexport const H4 = ({ children }) => (\n  <h4 id={slug(children, { lower: true })}>{children}</h4>\n);\nexport const H5 = ({ children }) => (\n  <h5 id={slug(children, { lower: true })}>{children}</h5>\n);\nexport const H6 = ({ children }) => (\n  <h6 id={slug(children, { lower: true })}>{children}</h6>\n);\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport styled from 'react-emotion';\n\nconst Container = styled.div`\n  margin-top: 16px;\n`;\n\nconst Breadcrumbs = ({ path, title }) => {\n  return (\n    <Container>\n      {path.map((item, i) => (\n        <span key={i}>\n          {item.url ? <Link to={item.url}>{item.title}</Link> : `${item.title}`}{' '}\n          â€º{' '}\n        </span>\n      ))}\n      <span>{title}</span>\n    </Container>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  path: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      url: PropTypes.string,\n    })\n  ),\n  title: PropTypes.string.isRequired,\n};\n\nexport default Breadcrumbs;\n","import { DateTime } from 'luxon';\n\nexport const formatDate = date => DateTime.fromISO(date).toLocaleString();\n\nexport const longFormatDate = date =>\n  DateTime.fromISO(date).toLocaleString(DateTime.DATE_FULL);\n\nexport const shortFormatDate = date => DateTime.fromISO(date).toFormat('LLL d');\n\nexport const getMonthNumber = date =>\n  Number(DateTime.fromISO(date).toFormat('L'));\n\nexport const getMonthName = date => DateTime.fromISO(date).toFormat('LLLL');\n\nexport const getDayOfWeek = date => DateTime.fromISO(date).toFormat('cccc');\n\nexport const getFirstStartDate = dates =>\n  dates.reduce(\n    (firstDate, current) =>\n      !firstDate\n        ? current.startDate\n        : new Date(current.startDate) < new Date(firstDate)\n          ? current.startDate\n          : firstDate,\n    null\n  );\n\nexport const getLastEndDate = dates =>\n  dates.reduce(\n    (lastDate, current) =>\n      !lastDate\n        ? current.endDate\n        : new Date(current.endDate) > new Date(lastDate)\n          ? current.endDate\n          : lastDate,\n    null\n  );\n\nexport const getFutureEvents = events => {\n  const q = new Date();\n  const m = q.getMonth();\n  const d = q.getDate();\n  const y = q.getFullYear();\n\n  const today = new Date(y, m, d);\n\n  return events\n    .filter(\n      ({ node }) =>\n        node.endDate\n          ? DateTime.fromFormat(node.endDate, 'yyyy-LL-dd').toJSDate() >= today\n          : node.startDate\n            ? DateTime.fromFormat(node.startDate, 'yyyy-LL-dd').toJSDate() >=\n              today\n            : node.dateAndRegistration &&\n              DateTime.fromFormat(\n                getLastEndDate(node.dateAndRegistration),\n                'yyyy-LL-dd'\n              ).toJSDate() >= today\n    )\n    .map(({ node }) => ({\n      ...node,\n      startDate: node.startDate || getFirstStartDate(node.dateAndRegistration),\n      slug: node.fields.slug,\n    }))\n    .sort((a, b) => new Date(a.startDate) > new Date(b.startDate));\n};\n\nexport const getCalendarFormat = (date, time) => {\n  if (time) {\n    const formatDate = !time ? 'yyyy-MM-dd' : 'yyyy-MM-dd h:mma';\n    const inputDate = !time ? date : `${date} ${time}`;\n    const isoFormat = DateTime.fromFormat(inputDate, formatDate).toISO();\n    return isoFormat.split('.')[0].replace(/:|-/g, '');\n  } else {\n    return DateTime.fromISO(date).toFormat('yyyyMMdd');\n  }\n};\n\nexport const getCalendarURl = (\n  startDate,\n  endDate,\n  startTime,\n  endTime,\n  name\n) => {\n  let dateStart;\n  let dateEnd;\n\n  if (startTime) {\n    dateStart = getCalendarFormat(startDate, startTime);\n  } else {\n    dateStart = getCalendarFormat(startDate, null);\n  }\n  if (endTime) {\n    dateEnd =\n      !endTime && startTime\n        ? getCalendarFormat(endDate || startDate, startTime)\n        : getCalendarFormat(endDate || startDate, endTime);\n  } else {\n    dateEnd = getCalendarFormat(endDate || startDate, null);\n  }\n\n  return `http://www.google.com/calendar/event?action=TEMPLATE&text=${name}&dates=${dateStart}/${dateEnd}`;\n};\n\nexport default formatDate;\n"],"sourceRoot":""}